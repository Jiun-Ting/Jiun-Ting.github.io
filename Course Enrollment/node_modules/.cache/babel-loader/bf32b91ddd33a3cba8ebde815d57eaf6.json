{"ast":null,"code":"class SearchAndFilter {\n  searchAndFilter(courses, search, subject, interest, minimumCredits, maximumCredits) {\n    if (subject !== '' && search !== null) {\n      let coursesAfterSearch = [];\n\n      for (const course of courses) {\n        for (const keyword of course.keywords) {\n          if (keyword.includes(search)) {\n            coursesAfterSearch.push(course);\n            break;\n          }\n        }\n      }\n\n      courses = coursesAfterSearch;\n    }\n\n    if (subject !== 'All') {\n      let coursesAfterSubject = [];\n\n      for (const course of courses) {\n        if (course.subject === subject) coursesAfterSubject.push(course);\n      }\n\n      courses = coursesAfterSubject;\n    }\n\n    if (interest !== 'All') {\n      let coursesAfterInterest = [];\n\n      for (const course of courses) {\n        if (course.subject === interest) coursesAfterInterest.push(course);\n\n        for (let i = 0; i <= course.keywords.length; i++) {\n          if (course.keywords[i] === interest) {\n            coursesAfterInterest.push(course);\n          }\n        }\n      }\n\n      courses = coursesAfterInterest;\n    }\n\n    if (minimumCredits !== '') {\n      let coursesAfterMinimumCredits = [];\n\n      for (const course of courses) {\n        if (course.credits >= parseInt(minimumCredits)) coursesAfterMinimumCredits.push(course);\n      }\n\n      courses = coursesAfterMinimumCredits;\n    }\n\n    if (maximumCredits !== '') {\n      let coursesAfterMaximumCredits = [];\n\n      for (const course of courses) {\n        if (course.credits <= parseInt(maximumCredits)) coursesAfterMaximumCredits.push(course);\n      }\n\n      courses = coursesAfterMaximumCredits;\n    }\n\n    return courses;\n  }\n\n}\n\nexport default SearchAndFilter;","map":{"version":3,"sources":["C:/Users/thepa/Jiun-Ting.github.io/Course Enrollment/src/SearchAndFilter.js"],"names":["SearchAndFilter","searchAndFilter","courses","search","subject","interest","minimumCredits","maximumCredits","coursesAfterSearch","course","keyword","keywords","includes","push","coursesAfterSubject","coursesAfterInterest","i","length","coursesAfterMinimumCredits","credits","parseInt","coursesAfterMaximumCredits"],"mappings":"AAAA,MAAMA,eAAN,CAAsB;AACpBC,EAAAA,eAAe,CAACC,OAAD,EAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,QAA3B,EAAoCC,cAApC,EAAoDC,cAApD,EAAoE;AAGjF,QAAGH,OAAO,KAAK,EAAZ,IAAkBD,MAAM,KAAK,IAAhC,EAAsC;AACpC,UAAIK,kBAAkB,GAAG,EAAzB;;AAEA,WAAI,MAAMC,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,aAAI,MAAMQ,OAAV,IAAqBD,MAAM,CAACE,QAA5B,EACA;AACE,cAAGD,OAAO,CAACE,QAAR,CAAiBT,MAAjB,CAAH,EAA4B;AAC5BK,YAAAA,kBAAkB,CAACK,IAAnB,CAAwBJ,MAAxB;AACA;AACC;AACF;AACF;;AACDP,MAAAA,OAAO,GAAGM,kBAAV;AACD;;AAGD,QAAGJ,OAAO,KAAK,KAAf,EAAsB;AACpB,UAAIU,mBAAmB,GAAG,EAA1B;;AAEA,WAAI,MAAML,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,YAAGO,MAAM,CAACL,OAAP,KAAmBA,OAAtB,EACEU,mBAAmB,CAACD,IAApB,CAAyBJ,MAAzB;AACH;;AACDP,MAAAA,OAAO,GAAGY,mBAAV;AACD;;AAED,QAAGT,QAAQ,KAAK,KAAhB,EAAuB;AACrB,UAAIU,oBAAoB,GAAG,EAA3B;;AACA,WAAI,MAAMN,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,YAAGO,MAAM,CAACL,OAAP,KAAmBC,QAAtB,EACEU,oBAAoB,CAACF,IAArB,CAA0BJ,MAA1B;;AACF,aAAK,IAAIO,CAAC,GAAC,CAAX,EAAcA,CAAC,IAAEP,MAAM,CAACE,QAAP,CAAgBM,MAAjC,EAA0CD,CAAC,EAA3C,EAA8C;AAC5C,cAAIP,MAAM,CAACE,QAAP,CAAgBK,CAAhB,MAAuBX,QAA3B,EAAoC;AAClCU,YAAAA,oBAAoB,CAACF,IAArB,CAA0BJ,MAA1B;AACD;AACF;AACF;;AACDP,MAAAA,OAAO,GAAGa,oBAAV;AACD;;AACD,QAAGT,cAAc,KAAK,EAAtB,EAA0B;AACxB,UAAIY,0BAA0B,GAAG,EAAjC;;AAEA,WAAI,MAAMT,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,YAAGO,MAAM,CAACU,OAAP,IAAkBC,QAAQ,CAACd,cAAD,CAA7B,EACEY,0BAA0B,CAACL,IAA3B,CAAgCJ,MAAhC;AACH;;AACDP,MAAAA,OAAO,GAAGgB,0BAAV;AACD;;AAED,QAAGX,cAAc,KAAK,EAAtB,EAA0B;AACxB,UAAIc,0BAA0B,GAAG,EAAjC;;AAEA,WAAI,MAAMZ,MAAV,IAAoBP,OAApB,EAA6B;AAC3B,YAAGO,MAAM,CAACU,OAAP,IAAkBC,QAAQ,CAACb,cAAD,CAA7B,EACEc,0BAA0B,CAACR,IAA3B,CAAgCJ,MAAhC;AACH;;AACDP,MAAAA,OAAO,GAAGmB,0BAAV;AACD;;AAED,WAAOnB,OAAP;AACD;;AAhEmB;;AAmEtB,eAAeF,eAAf","sourcesContent":["class SearchAndFilter {\r\n  searchAndFilter(courses, search, subject, interest,minimumCredits, maximumCredits) {\r\n\r\n  \r\n    if(subject !== '' && search !== null) {\r\n      let coursesAfterSearch = [];\r\n\r\n      for(const course of courses) {\r\n        for(const keyword of course.keywords)\r\n        {\r\n          if(keyword.includes(search)){\r\n          coursesAfterSearch.push(course);\r\n          break;\r\n          }\r\n        } \r\n      }\r\n      courses = coursesAfterSearch;\r\n    }\r\n\r\n\r\n    if(subject !== 'All') {\r\n      let coursesAfterSubject = [];\r\n\r\n      for(const course of courses) { \r\n        if(course.subject === subject)\r\n          coursesAfterSubject.push(course);\r\n      }\r\n      courses = coursesAfterSubject;\r\n    }\r\n\r\n    if(interest !== 'All') {\r\n      let coursesAfterInterest = [] \r\n      for(const course of courses) { \r\n        if(course.subject === interest)\r\n          coursesAfterInterest.push(course);\r\n        for (let i=0; i<=course.keywords.length ; i++){\r\n          if (course.keywords[i] === interest){\r\n            coursesAfterInterest.push(course);\r\n          }\r\n        }\r\n      }\r\n      courses = coursesAfterInterest;\r\n    }\r\n    if(minimumCredits !== '') {\r\n      let coursesAfterMinimumCredits = [];\r\n\r\n      for(const course of courses) { \r\n        if(course.credits >= parseInt(minimumCredits))\r\n          coursesAfterMinimumCredits.push(course);\r\n      }\r\n      courses = coursesAfterMinimumCredits;\r\n    }\r\n\r\n    if(maximumCredits !== '') {\r\n      let coursesAfterMaximumCredits = [];\r\n\r\n      for(const course of courses) { \r\n        if(course.credits <= parseInt(maximumCredits))\r\n          coursesAfterMaximumCredits.push(course);\r\n      }\r\n      courses = coursesAfterMaximumCredits;\r\n    }\r\n\r\n    return courses;\r\n  }\r\n}\r\n\r\nexport default SearchAndFilter;\r\n"]},"metadata":{},"sourceType":"module"}